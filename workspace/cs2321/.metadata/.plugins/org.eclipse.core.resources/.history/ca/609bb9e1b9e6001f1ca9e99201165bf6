package cs2321;

import net.datastructures.*;

/**
 * @author cdbrown
 * 
 */
public class AdjListGraph<V, E> implements Graph<V, E> {


	private class decPos<K> implements DecorablePosition<K>
	{
		private UnorderedMap<Object,Object> dpmap;
		private K element;

		public decPos(K el)
		{
			dpmap = new UnorderedMap<Object,Object>();
			element = el;
		}

		public void setElement(K e){
			element = e;
		}

		@Override
		public K element() {
			return element;
		}

		@Override
		public Iterable<Entry<Object, Object>> entries() {
			return dpmap.entries() ;
		}

		@Override
		public Object get(Object key) throws InvalidKeyException {
			return dpmap.get(key);
		}

		@Override
		public boolean isEmpty() {
			return dpmap.isEmpty();
		}

		@Override
		public Iterable<Object> keys() {
			return dpmap.keys();
		}

		@Override
		public Object put(Object key, Object value) throws InvalidKeyException {
			return dpmap.put(key, value);
		}

		@Override
		public Object remove(Object key) throws InvalidKeyException {
			return dpmap.remove(key);
		}

		@Override
		public int size() {
			return dpmap.size();
		}

		@Override
		public Iterable<Object> values() {
			return dpmap.values();
		}

	}
	private class edgeEntry<E> extends decPos<E>
	{		
		//create pointers to vertices defining the edge
		private V vert0;
		private V vert1;
		public edgeEntry(V v0, V v1, E e){
			super(e);
			vert0 = v0;
			vert1 = v1;
		}

	}
	/**
	 * A simple vertex class
	 * @author bjnix
	 *
	 * @param <V>
	 */
	private class vertEntry<V> extends decPos<V>
	{
		//Declare logfiles of pointers to ingoing and outgoing edges
		private Logfile<Edge<E>, Object> in;
		private Logfile<Edge<E>, Object> out;
		//Constructor
		public vertEntry(V v) {
			super(v);
			in = new Logfile<Edge<E>, Object>();
			out = new Logfile<Edge<E>, Object>();
		}		

	}
	private UnorderedMap<vertEntry<V>,Object> vertL; 
	private UnorderedMap<edgeEntry<E>,Object> edgeL;
	
	public AdjListGraph() {
		vertL = new UnorderedMap<vertEntry<V>, Object>();
		edgeL = new UnorderedMap<edgeEntry<E>, Object>();
		
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#areAdjacent(net.datastructures.Vertex, net.datastructures.Vertex)
	 */
	public boolean areAdjacent(Vertex<V> u, Vertex<V> v)
	throws InvalidPositionException {
		// TODO Auto-generated method stub
		return false;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#edges()
	 */
	public Iterable<Edge<E>> edges() {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#endVertices(net.datastructures.Edge)
	 */
	public Vertex[] endVertices(Edge<E> e) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#incidentEdges(net.datastructures.Vertex)
	 */
	public Iterable<Edge<E>> incidentEdges(Vertex<V> v)
	throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#insertEdge(net.datastructures.Vertex, net.datastructures.Vertex, java.lang.Object)
	 */
	public Edge<E> insertEdge(Vertex<V> u, Vertex<V> v, E o)
	throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#insertVertex(java.lang.Object)
	 */
	public Vertex<V> insertVertex(V o) {
		vertEntry<V> ent = new vertEntry<V>(o);
		vertL.put(ent, null);
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#numEdges()
	 */
	public int numEdges() {
		// TODO Auto-generated method stub
		return 0;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#numVertices()
	 */
	public int numVertices() {
		// TODO Auto-generated method stub
		return 0;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#opposite(net.datastructures.Vertex, net.datastructures.Edge)
	 */
	public Vertex<V> opposite(Vertex<V> v, Edge<E> e)
	throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#removeEdge(net.datastructures.Edge)
	 */
	public E removeEdge(Edge<E> e) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#removeVertex(net.datastructures.Vertex)
	 */
	public V removeVertex(Vertex<V> v) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#replace(net.datastructures.Edge, java.lang.Object)
	 */
	public E replace(Edge<E> p, E o) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#replace(net.datastructures.Vertex, java.lang.Object)
	 */
	public V replace(Vertex<V> p, V o) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#vertices()
	 */
	public Iterable<Vertex<V>> vertices() {
		// TODO Auto-generated method stub
		return null;
	}

}
