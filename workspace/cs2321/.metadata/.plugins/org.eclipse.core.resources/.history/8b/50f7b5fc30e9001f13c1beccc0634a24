package cs2321;

import net.datastructures.*;

/**
 * @author cdbrown
 * 
 */
public class AdjListGraph<String, E> implements Graph<String, E> {

	private class edgeEntry<E>  implements Edge<E>
	{		
		//create pointers to vertices defining the edge
		private vertEntry<String> vert0;
		private vertEntry<String> vert1;
		private UnOrderedMap<Object,Object> edgmap;
		private E element;
		private Position<edgeEntry<E>> edgePos;
		public edgeEntry(vertEntry<String> v0, vertEntry<String> v1, E e){
			element = e;
			edgmap = new UnOrderedMap<Object,Object>();
			vert0 = v0;
			vert1 = v1;

		}
		public void setInVert(vertEntry<String> v){
			vert0 = v;
		}
		public void setOutVert(vertEntry<String> v){
			vert1 = v;
		}
		//-----Position implementation
		public void setElement(E e){
			element = e;
		}

		public E element() {
			return element;
		}
		public void setPosition(Position<edgeEntry<E>> position){
			edgePos = position;
		}
		//-----Map implementation
		public Iterable<Entry<Object, Object>> entries() {
			return edgmap.entries() ;
		}

		public Object get(Object key) throws InvalidKeyException {
			return edgmap.get(key);
		}

		public boolean isEmpty() {
			return edgmap.isEmpty();
		}

		public Iterable<Object> keys() {
			return edgmap.keys();
		}

		public Object put(Object key, Object value) throws InvalidKeyException {
			return edgmap.put(key, value);
		}

		public Object remove(Object key) throws InvalidKeyException {
			return edgmap.remove(key);
		}

		public int size() {
			return edgmap.size();
		}

		public Iterable<Object> values() {
			return edgmap.values();
		}



	}
	/**
	 * A simple vertex class
	 * @author bjnix
	 *
	 * @param <String>
	 */
	public class vertEntry<String> implements Vertex<String>
	{
		//Declare logfiles of pointers to ingoing and outgoing edges
		protected LinkedSequence<Edge<E>> in;
		protected LinkedSequence<Edge<E>> out;
		private Position<vertEntry<String>> vertPos = null;
		//Constructor
		public vertEntry(String v) {
			in = new LinkedSequence<Edge<E>>();
			out = new LinkedSequence<Edge<E>>();
			vertmap = new UnOrderedMap<Object,Object>();
			element = v;

		}	
		//--------Position implementation
		private UnOrderedMap<Object,Object> vertmap;
		private String element;



		public void setElement(String e){
			element = e;
		}

		public String element() {
			return element;
		}

		public void setPosition(Position<vertEntry<String>> e){
			vertPos = e;
		}
		public Position<vertEntry<String>> getPosition()
		{
			return vertPos;
		}

		//--------Map implementation
		public Iterable<Entry<Object, Object>> entries() {
			return vertmap.entries() ;
		}


		public Object get(Object key) throws InvalidKeyException {
			return vertmap.get(key);
		}


		public boolean isEmpty() {
			return vertmap.isEmpty();
		}


		public Iterable<Object> keys() {
			return vertmap.keys();
		}


		public Object put(Object key, Object value) throws InvalidKeyException {
			return vertmap.put(key, value);
		}


		public Object remove(Object key) throws InvalidKeyException {
			return vertmap.remove(key);
		}


		public int size() {
			return vertmap.size();
		}


		public Iterable<Object> values() {
			return vertmap.values();
		}

	}
	private HashMap<String,vertEntry<String>> vertL; 
	private LinkedSequence<edgeEntry<E>> edgeL;

	public AdjListGraph() {
		vertL = new HashMap<String,vertEntry<String>>();
		edgeL = new LinkedSequence<edgeEntry<E>>();

	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#areAdjacent(net.datastructures.Vertex, net.datastructures.Vertex)
	 */
	public boolean areAdjacent(Vertex<String> u, Vertex<String> v)
	throws InvalidPositionException {
		// TODO Auto-generated method stub
		return false;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#edges()
	 */
	public Iterable<Edge<E>> edges() {
		// TODO Auto-generated method stub
		LinkedSequence<Edge<E>> temp = new LinkedSequence<Edge<E>>();
		for ( edgeEntry<E> e : edgeL)
		{
			temp.addLast(e);
		}
		return temp;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#endVertices(net.datastructures.Edge)
	 */
	public Vertex[] endVertices(Edge<E> e) throws InvalidPositionException {
		Vertex[] temp = new Vertex[2];
		for (edgeEntry<E> f: edgeL)
			if(f == e){
		temp[0] = f.vert0;
		temp[1] = f.vert1;
			}
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#incidentEdges(net.datastructures.Vertex)
	 */
	public Iterable<Edge<E>> incidentEdges(Vertex<String> v)
	throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#insertEdge(net.datastructures.Vertex, net.datastructures.Vertex, java.lang.Object)
	 */
	public Edge<E> insertEdge(Vertex<String> u, Vertex<String> v, E o)
	throws InvalidPositionException {
		boolean ufnd = false;
		boolean vfnd = true;
		vertEntry<String> uV = null;
		vertEntry<String> vV = null;
		edgeEntry<E> edge = new edgeEntry<E>(uV, vV, o);
		for(vertEntry<String> f : vertL)
		{
			String temp = f.element;
			if(temp == u){
				edge.setInVert(f);
				f.out.addLast(edge);
				ufnd = true;
			}
			if(temp == v){
				edge.setOutVert(f);
				f.in.addLast(edge);
				vfnd = true;
			}
		}
		if (!ufnd)
		{
			insertVertex(u.element());
			vertEntry<String> vl = vertL.getLast();
			edge.setInVert(vl);
			vl.out.addLast(edge);
		}

		if (!vfnd)
		{
			insertVertex(v.element());
			vertEntry<String> vl = vertL.getLast();
			edge.setOutVert(vl);
			vl.in.addLast(edge);
		}
		edgeL.addLast(edge);
		edge.setPosition(edgeL.last());
		return edge;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#insertVertex(java.lang.Object)
	 */
	public Vertex<String> insertVertex(String o) {
		if(vertL.get(o).isEmpty()){
			vertEntry<String> ent = new vertEntry<String>(o);
			vertL.put(o, ent);
			vertL.getMap(o).
		}
		
		vertL.addLast(ent);
		ent.setPosition(vertL.last());
		return ent;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#numEdges()
	 */
	public int numEdges() {
		// TODO Auto-generated method stub
		return 0;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#numVertices()
	 */
	public int numVertices() {
		// TODO Auto-generated method stub
		return 0;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#opposite(net.datastructures.Vertex, net.datastructures.Edge)
	 */
	public Vertex<String> opposite(Vertex<String> v, Edge<E> e)
	throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#removeEdge(net.datastructures.Edge)
	 */
	public E removeEdge(Edge<E> e) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#removeVertex(net.datastructures.Vertex)
	 */
	public String removeVertex(Vertex<String> v) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#replace(net.datastructures.Edge, java.lang.Object)
	 */
	public E replace(Edge<E> p, E o) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#replace(net.datastructures.Vertex, java.lang.Object)
	 */
	public String replace(Vertex<String> p, String o) throws InvalidPositionException {
		// TODO Auto-generated method stub
		return null;
	}

	/* (non-Javadoc)
	 * @see net.datastructures.Graph#vertices()
	 */
	public Iterable<Vertex<String>> vertices() {
		// TODO Auto-generated method stub
		return null;
	}
//	public static void main(String[] args){
//		adj
//	}
}
