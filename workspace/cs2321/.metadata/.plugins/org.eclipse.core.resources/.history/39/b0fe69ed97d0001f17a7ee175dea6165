package cs2321;

import net.datastructures.*;

import java.util.Comparator;

public class LookupTable<K, V> implements Map<K, V> {

	private Entry<K,V>[] data;
	private Comparator<K> comparator;
	private int mCurrentSize = 0;
	private int mArraySize = 10;

	private static class MyEntry<K,V> implements Entry<K,V> {
		//proclaim variables
		private K key;
		private V value;

		//**constructor**
		public MyEntry(K k,V v){
			key = k;
			value = v;
		}

		@Override
		public K getKey() { return key; }

		@Override
		public V getValue() { return value; }

	}

	public LookupTable(){
		comparator = new DefaultKeyComparator<K>();
		data = (Entry<K,V>[])new Entry[mArraySize];
	}

	/**
	 * 
	 * @param comparator - on construction, set comparator
	 */
	public LookupTable(Comparator<K> comparator) {
		this.comparator = comparator;
	}

	/**
	 * @param comparator the comparator to set
	 */
	public void setComparator(Comparator<K> comparator) {
		this.comparator = comparator;
	}

	@TimeComplexity("O(n)")
	public Iterable<Entry<K, V>> entries() {
		//TCJ: the time varies linearly with the size of list
		LinkedSequence<Entry<K, V>> iter = new LinkedSequence<Entry<K, V>>();//create iterable list
		for (int i = 0; i < mCurrentSize ; i ++)//for each entry in data,
			iter.addLast(data[i]);//add the entry to the list
		return iter;
	}

	public V get(K key) throws InvalidKeyException { 
		int k = find(key);	
		if (data[k].getKey() != key) { throw new InvalidKeyException("Invalid Key");}
		return data[k].getValue();	
	}
	public boolean isEmpty() {		
		return (mCurrentSize == 0);
	}
	@TimeComplexity("O(n)")
	public Iterable<K> keys() {
		//TCJ: the time varies linearly with the size of list
		LinkedSequence<K> iter = new LinkedSequence<K>();//create iterable list
		for (int i = 0; i < mCurrentSize ; i ++)//for each entry in data,
			iter.addLast(data[i].getKey());//add the entry to the list
		return iter;		
	}

	public V put(K key, V value) throws InvalidKeyException {
		Entry<K, V> temp = null;
		Entry<K, V> nue = new MyEntry<K, V>(key, value); 
		int k = 0;
		if (mCurrentSize == 0){
			data[0] = nue;
			mCurrentSize ++;
			return null;
		}
			 k = find(key);

		if ( comparator.compare(data[k].getKey(),key) == 0)
		{
			temp = data[k];
			data[k] = nue;
		}

		else if ( comparator.compare(data[k].getKey(),key) <= 0 )
		{
			for(int j = mCurrentSize; j > k + 1 ; j--)
			{
				data[j] = data[j-1];//shift elements

			}
			mCurrentSize ++;
			data[k] = nue;
		}

		return temp.getValue();
	}

	public V remove(K key) throws InvalidKeyException {
		for ( int i = find(key) ; i < mCurrentSize ; i ++)
			data[i] = data[i+1];
			return null;
	}
	@TimeComplexity("O(1)")
	public int size() {
		//TCJ: time does not vary with size
		return mCurrentSize ;
	}

	public Iterable<V> values() {

		//TCJ: the time varies linearly with the size of list
		LinkedSequence<V> iter = new LinkedSequence<V>();//create iterable list
		for (int i = 0; i < mCurrentSize ; i ++)//for each entry in data,
			iter.addLast(data[i].getValue());//add the entry to the list
		return iter;		

	}
	private int find(K key){
		
		int left = 0; 
		int mid;
		int right = mCurrentSize;
		do{
			mid = left + ((right - left)/2);
			if ( comparator.compare(key,data[ mid ].getKey() ) > 0)
				left = mid + 1;
			else 
				right = mid - 1;

		}while (!(data[mid] == key) || !(left > right));

		return mid;

	}
	public String toString(){
		String gum = " ";
		for ( int i = 0 ; i < mCurrentSize ; i ++ )
		{
			gum = gum + data[i].getKey() + " , " + data[i].getValue() + " \n ";
		}
			return gum;
	}

	public static void main(String[] args){
		LookupTable<Integer, String> lut = new LookupTable<Integer, String>();
		System.out.println(lut.isEmpty());
		lut.put(0, "A");
		lut.put(1, "B");
		lut.put(2, "C");
		lut.put(3, "D");
		lut.put(4, "E");
		lut.put(5, "F");
		System.out.println(lut.isEmpty());
		System.out.println(lut);
	}
}

